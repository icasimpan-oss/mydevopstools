###################################################################
## g2 - a tinyurl-like tool from CLI
## AUTHOR: ismael.angelo@casimpan.com
###################################################################

#!/bin/bash

## DESIRED COMMAND => ./g2_v2 <URL_HINT> <browser_type>

## PARAMETERS
url_hint="$1"
browser_type="$2"

tooldir=$(dirname $0)
conf="$tooldir/../conf/g2.conf"
user_conf="$tooldir/../conf/g2-user.conf"
[[ -e $user_conf ]] && . $user_conf

## list of browsers + full path
case "$(uname)" in 
  Darwin)
   [[ -z $chrome_bin  ]] && chrome_bin='/Applications/Google Chrome.app'
   [[ -z $firefox_bin ]] && firefox_bin='/Applications/Firefox.app'
   [[ -z $default2use ]] && default2use=$chrome_bin
  ;;
  *)
   [[ -z $chrome_bin  ]] && chrome_bin='/cygdrive/c/Program Files (x86)/Google/Chrome/Application/chrome.exe'
   [[ -z $firefox_bin ]] && firefox_bin='/cygdrive/c/Program Files (x86)/Mozilla Firefox/firefox.exe'
   [[ -z $ie_bin      ]] && ie_bin='/cygdrive/c/Program Files/Internet Explorer/iexplore.exe'
   [[ -z $iron_bin    ]] && iron_bin='/cygdrive/c/Program Files (x86)/SRWare Iron/iron.exe'
   [[ -z $default2use ]] && default2use=$iron_bin
  ;;
esac

case "$browser_type" in
  chrome|cr)
    browser2use=$chrome_bin
  ;;
  firefox|ff)
    browser2use=$firefox_bin
  ;;
  ie)
    browser2use=$ie_bin
  ;;
  iron|ir)
    browser2use=$iron_bin
  ;;
  *)
    browser2use=$default2use
  ;;
esac

## get the real urlhint if it can
parse_urlhint () {
  local retval=$(cut -d' ' -f1 $conf|grep -v ^#|grep -v ^$|grep ^"$1"$)

  echo $retval
} ## END: parse_urlhintO()

## ---------------------------------------------------
## check_delim() - checks for the delimiter in urlhint
## INPUT :  $1 - either
##               * goog/?gws_rd=ssl#q=linux+centos
##               * goog?gws_rd=ssl#q=linux+centos
## POSSIBLE OUTPOUT: 'NONE' --> nothing to parse
##                   'FORWARD_SLASH' --> /
##                   'QUESTION_MARK' --> ?
## ---------------------------------------------------
check_delim () {
  local urlhint=$1

  local delim_seen='NONE' ## default delimiter

  ## check if QUESTION_MARK. Otherwise, it could be "FORWARD_SLASH'
  if [[ "$(echo $urlhint |grep -c '?')"   -eq 1 ]]; then
    delim_seen='QUESTION_MARK'
  elif [[ "$(echo $urlhint |grep -c '/')" -eq 1 ]]; then
    delim_seen='FORWARD_SLASH'    
  fi

  echo $delim_seen
} ## END: check_delim()

## ============================================================
## PARSE $url_hint: now, / or ? is autodetected.
##     Examples below are now both valid:
##        * goog/?gws_rd=ssl#q=linux+centos
##        * goog?gws_rd=ssl#q=linux+centos
## 
## ANOTHER NOTE: 
##  * If there is a urlparameter "&", whole $url_hint must be
##    quoted like below (since & in CLI means that job must be
##    run in background). 
##      Example: "hint_here/?p1=this&p2=here" is VALID
##                hint_here/?p1=this&p2=here is NOT VALID
##               
## ============================================================

delim_seen=$(check_delim "$url_hint")

## $applic_id -> identifier of browser URL to open
##   * url_hint="hint_here/?p1=this&p2=here"
##     $applic_id=hiint_here
case $delim_seen in 
  QUESTION_MARK)
    applic_param=${url_hint##*\?}
    ## remove trailing forward slash(/) which is a result
    ## of having this kind of url_hint --> "cv/?RIS=R_GOMS6_1.103.1.0"
    applic_id=$(echo "$url_hint"|cut -d'?' -f1|cut -d'/' -f1)
  ;;
  FORWARD_SLASH)
    applic_id=$(echo "$url_hint"|cut -d'/' -f1)
    applic_param=$(echo "$url_hint"|sed "s|^$applic_id||")
  ;;
  *) 
    applic_id=$url_hint
esac
valid_urlhint=$(parse_urlhint "$applic_id")

[[ "$valid_urlhint" != "$applic_id" ]] && {
   try_hint=`cut -d' ' -f1 $conf|grep $applic_id|cut -d' ' -f1`
   echo "ERROR: hint ($applic_id) not found or ambiguous!"
   ## if $try_hint has some matches, show it
   [[ "$try_hint" != "" ]] && {
     echo "Maybe you mean any of the following:"
     for each_hint in $try_hint; do
       echo " * $each_hint"
     done
   }
   exit 1
}

## ============================================================
## ASSEMBLE THE FINAL URL
## ============================================================
##    ex: goog                 --> https://www.google.com/
##        goog/#q=linux+centos --> https://www.google.com/#q=linux+cents
final_url=$(awk "/^$applic_id / {print \$NF}" $conf)
[[ "$delim_seen" = "QUESTION_MARK" ]] && final_url="$final_url?$applic_param" || final_url="$final_url$applic_param"

## ============================================================
## OPEN $final_url IN BROWSER, if parameter count != 0 
## ============================================================
[[ $# = 0 ]] && { 
  echo "ERROR: urlhint missing";
  echo "Usage: g2 <urlhint_here>"
  exit 1
}

echo "[log] - \$final_url - |$final_url|"

set -xv
browse_run_prefix=
[[ "$(uname)" = "Darwin" ]] && browser_run_prefix='open -a '
$browser_run_prefix "$browser2use" "$final_url"
